" ==================================================================
" Maintainer: funcdfs (funcdfs@gmail.com) 
" Github:     github.com/funcdfs
" ==================================================================

" ============================ Key Mappings ============================

" F-key mappings (commented out - uncomment if needed)
" nnoremap <F1> :w !clip.exe<CR>
" nnoremap <F2> :set nu! nu?<CR>
" nnoremap <F3> :set list! list?<CR>
" nnoremap <F4> :set wrap! wrap?<CR>
" set pastetoggle=<F5>
" au InsertLeave * set nopaste 
" nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>
" nnoremap <F7> :w !clip.exe<CR><CR>

" kj for Esc - Fast escape from insert mode
let g:esc_k_lasttime = 0
let g:esc_j_lasttime = 0
function! KJescape(key)
	if a:key=='k' | let g:esc_k_lasttime = reltimefloat(reltime()) | endif
	if a:key=='j' | let g:esc_j_lasttime = reltimefloat(reltime()) | endif
	let l:timediff = abs(g:esc_k_lasttime - g:esc_j_lasttime)
	return (l:timediff <= 0.05 && l:timediff >=0.001) ? "\b\e" : a:key
endfunction
inoremap <expr> k KJescape('k')
inoremap <expr> j KJescape('j')
inoremap <nowait> kj <ESC>

" Timeout settings for key combinations
set timeout
set ttimeout
set timeoutlen=500
set ttimeoutlen=10

" Bracket jump - Tab to jump between matching brackets
noremap <TAB> %

" Remap U to <C-r> for easier redo
nnoremap U <C-r>

" Remove highlight after search
noremap <silent><leader>/ :nohls<CR>

" H/L for line beginning/end navigation
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $
onoremap H ^
onoremap L $
xnoremap H ^
xnoremap L $

" Map ; to : and save a million keystrokes
" if in very fast typing, this will may make a lots of error touch
" nnoremap ; :

" Leader key shortcuts (leader key is '\')
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <Leader>d ggdG
nnoremap <Leader>c ggVG"+y
vnoremap <leader>c "+y

" Zen mode - keep search pattern at center of screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" Reselect visual block after indent/outdent
vnoremap < <gv 
vnoremap > >gv

" Make Y behave like other capitals (y$ -> Y)
map Y y$

" Save with sudo privileges
cmap w!! w !sudo tee >/dev/null %

" ============================ Base Settings ============================

" Syntax and file handling
syntax on
set history=2000
filetype on
filetype plugin on
filetype indent on

" Basic behavior
set nocompatible
set autoread
set shortmess=atI
set magic
set title
set nobackup
set novisualbell
set noerrorbells
set tm=500

" Display and cursor
set cursorline
set scrolloff=11
set ruler
set number
set nowrap
set showcmd
set showmode
set showmatch
set matchtime=2

" Search settings
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab and indentation
set expandtab
set smarttab
set shiftround
set autoindent
set smartindent
set shiftwidth=4
set tabstop=4
set softtabstop=4

" fold
set foldenable
set foldmethod=indent
set foldlevel=99
let g:FoldMethod = 0
map <leader>z :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun

" Encoding settings
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf-8
set ffs=unix,dos,mac
set formatoptions+=m
set formatoptions+=B

" Selection and completion
set selection=inclusive
set selectmode=mouse,key
set completeopt=longest,menu
set wildmenu
set wildmode=longest,list,full
set wildignore=*.o,*~,*.pyc,*.class
set backspace=indent,eol,start
set whichwrap+=<,>,h,l


" Enable basic mouse behavior such as resizing buffers.
set mouse=a

" ============================ theme and status line ============================

" theme
set background=dark

" 启用 true color
if has("termguicolors")
  set termguicolors
endif

" 使用 gruvbox-material
set background=dark
let g:gruvbox_material_background = 'medium'
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_better_performance = 1
" update theme cmd: cd ~/.vim/pack/colors/start/gruvbox-material git pull
colorscheme gruvbox-material

" set mark column color
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" status line
" set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
set laststatus=2   " Always show the status line - use 2 lines for the status bar

" ============================ Plugin Configuration ============================

" delimitMate: VSCode-like smooth bracket completion
" Core settings for minimal visual interference
let g:delimitMate_expand_cr = 1                    " Expand on <CR>
let g:delimitMate_expand_space = 1                 " Expand on <Space> 
let g:delimitMate_balance_matchpairs = 1           " Balance brackets

" Eliminate visual jumps - key settings
let g:delimitMate_jump_expansion = 0               " Disable jump expansion to reduce flicker
let g:delimitMate_smart_quotes = 0                 " Disable smart quotes (can cause jumps)
let g:delimitMate_visual_leader = ""               " Remove visual leader

" Performance settings for instant response
let g:delimitMate_insert_timeout = 0               " No timeout delay
let g:delimitMate_autoclose = 1                    " Auto-close brackets
let g:delimitMate_tab2exit = 0                     " No tab to exit

" Minimal matchpairs and quotes to reduce complexity
let g:delimitMate_matchpairs = "(:),[:],{:}"       " Only basic brackets
let g:delimitMate_quotes = "\" ' `"                " Basic quotes

" Advanced settings to minimize cursor movement
let g:delimitMate_excluded_regions = "Comment,String" " Exclude regions that cause jumps
let g:delimitMate_excluded_ft = ""                  " No excluded filetypes
let g:delimitMate_eol_marker = ""                   " No end-of-line marker

" The smoothest possible experience
let g:delimitMate_backspace = 1                    " Smart backspace
" Note: left_delims and right_delims are handled automatically by delimitMate

" lightline.vim: Lightweight status line
let g:lightline = {
      \ 'colorscheme': 'gruvbox_material',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'filename': '%t'
      \ },
      \ }

" ==================================================================
" Key Bindings Summary
" ==================================================================
" Insert mode escape    -> kj or Esc  
" Bracket navigation    -> Tab (jump between matching brackets)
" Redo                  -> U
" Clear search highlight-> <leader>/
" Line navigation       -> H (beginning), L (end)
" File operations       -> <leader>w (save), <leader>q (quit)
" Content operations    -> <leader>d (delete all), <leader>c (copy)
" Search navigation     -> n/N (with center positioning)
" Visual indentation    -> </> (maintain selection)
" Copy to line end      -> Y
" Sudo save            -> :w!!
" Toggle folding       -> <leader>z
" ==================================================================

